{
  "openapi": "3.0.0",
  "info": {
    "title": "gnose-api",
    "version": "1.0.0",
    "description": "API REST para a plataforma GnoseApp, desenvolvido pelo time de desenvolvimento gnose",
    "contact": {
      "name": "Gnose Team",
      "email": "gnoseapp@gmail.com",
      "url": "https://gnose.app.br/"
    }
  },
  "paths": {
    "/banners/count": {
      "get": {
        "x-controller-name": "BannerController",
        "x-operation-name": "count",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "200": {
            "description": "Banner model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Banner.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Banner>"
                }
              }
            }
          }
        ],
        "operationId": "BannerController.count"
      }
    },
    "/banners/{id}": {
      "put": {
        "x-controller-name": "BannerController",
        "x-operation-name": "replaceById",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Banner PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Banner"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "BannerController.replaceById"
      },
      "patch": {
        "x-controller-name": "BannerController",
        "x-operation-name": "updateById",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Banner PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BannerPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "BannerController.updateById"
      },
      "get": {
        "x-controller-name": "BannerController",
        "x-operation-name": "findById",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "200": {
            "description": "Banner model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BannerWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Banner.Filter"
                }
              }
            }
          }
        ],
        "operationId": "BannerController.findById"
      },
      "delete": {
        "x-controller-name": "BannerController",
        "x-operation-name": "deleteById",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Banner DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "BannerController.deleteById"
      }
    },
    "/banners": {
      "post": {
        "x-controller-name": "BannerController",
        "x-operation-name": "create",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "200": {
            "description": "Banner model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBanner"
              }
            }
          }
        },
        "operationId": "BannerController.create"
      },
      "patch": {
        "x-controller-name": "BannerController",
        "x-operation-name": "updateAll",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "200": {
            "description": "Banner PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Banner.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Banner>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BannerPartial"
              }
            }
          }
        },
        "operationId": "BannerController.updateAll"
      },
      "get": {
        "x-controller-name": "BannerController",
        "x-operation-name": "find",
        "tags": [
          "BannerController"
        ],
        "responses": {
          "200": {
            "description": "Array of Banner model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BannerWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Banner.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "BannerController.find"
      }
    },
    "/books/count": {
      "get": {
        "x-controller-name": "BookController",
        "x-operation-name": "count",
        "tags": [
          "BookController"
        ],
        "responses": {
          "200": {
            "description": "Book model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Book.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Book>"
                }
              }
            }
          }
        ],
        "operationId": "BookController.count"
      }
    },
    "/books/{id}": {
      "put": {
        "x-controller-name": "BookController",
        "x-operation-name": "replaceById",
        "tags": [
          "BookController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Book PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "BookController.replaceById"
      },
      "get": {
        "x-controller-name": "BookController",
        "x-operation-name": "findById",
        "tags": [
          "BookController"
        ],
        "responses": {
          "200": {
            "description": "Book model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book.Filter"
                }
              }
            }
          }
        ],
        "operationId": "BookController.findById"
      },
      "delete": {
        "x-controller-name": "BookController",
        "x-operation-name": "deleteById",
        "tags": [
          "BookController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Book DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "BookController.deleteById"
      }
    },
    "/books": {
      "get": {
        "x-controller-name": "BookController",
        "x-operation-name": "find",
        "tags": [
          "BookController"
        ],
        "responses": {
          "200": {
            "description": "Array of Book model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "BookController.find"
      }
    },
    "/categories/count": {
      "get": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "count",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "200": {
            "description": "Category model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Category.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Category>"
                }
              }
            }
          }
        ],
        "operationId": "CategoryController.count"
      }
    },
    "/categories/{id}": {
      "put": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "replaceById",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Category PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CategoryController.replaceById"
      },
      "patch": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "updateById",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Category PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CategoryController.updateById"
      },
      "get": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "findById",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "200": {
            "description": "Category model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CategoryController.findById"
      },
      "delete": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "deleteById",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Category DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "CategoryController.deleteById"
      }
    },
    "/categories": {
      "post": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "create",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "200": {
            "description": "Category model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCategory"
              }
            }
          }
        },
        "operationId": "CategoryController.create"
      },
      "patch": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "updateAll",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "200": {
            "description": "Category PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Category.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Category>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryPartial"
              }
            }
          }
        },
        "operationId": "CategoryController.updateAll"
      },
      "get": {
        "x-controller-name": "CategoryController",
        "x-operation-name": "find",
        "tags": [
          "CategoryController"
        ],
        "responses": {
          "200": {
            "description": "Array of Category model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "CategoryController.find"
      }
    },
    "/leads/count": {
      "get": {
        "x-controller-name": "LeadController",
        "x-operation-name": "count",
        "tags": [
          "LeadController"
        ],
        "responses": {
          "200": {
            "description": "Leads model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Leads.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Leads>"
                }
              }
            }
          }
        ],
        "operationId": "LeadController.count"
      }
    },
    "/leads/{id}": {
      "put": {
        "x-controller-name": "LeadController",
        "x-operation-name": "replaceById",
        "tags": [
          "LeadController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Leads PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Leads"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "LeadController.replaceById"
      },
      "delete": {
        "x-controller-name": "LeadController",
        "x-operation-name": "deleteById",
        "tags": [
          "LeadController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Leads DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "operationId": "LeadController.deleteById"
      }
    },
    "/leads": {
      "post": {
        "x-controller-name": "LeadController",
        "x-operation-name": "create",
        "tags": [
          "LeadController"
        ],
        "responses": {
          "200": {
            "description": "Leads model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leads"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewLeads"
              }
            }
          }
        },
        "operationId": "LeadController.create"
      },
      "get": {
        "x-controller-name": "LeadController",
        "x-operation-name": "find",
        "tags": [
          "LeadController"
        ],
        "responses": {
          "200": {
            "description": "Array of Leads model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeadsWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leads.Filter"
                }
              }
            }
          }
        ],
        "operationId": "LeadController.find"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "operationId": "PingController.ping"
      }
    },
    "/users/count": {
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "count",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<User>"
                }
              }
            }
          }
        ],
        "operationId": "UserController.count"
      }
    },
    "/users/{id}/addresses": {
      "post": {
        "x-controller-name": "UserAddressController",
        "x-operation-name": "create",
        "tags": [
          "UserAddressController"
        ],
        "responses": {
          "200": {
            "description": "User model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAddressInUser"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserAddressController.create"
      },
      "patch": {
        "x-controller-name": "UserAddressController",
        "x-operation-name": "patch",
        "tags": [
          "UserAddressController"
        ],
        "responses": {
          "200": {
            "description": "User.Address PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Address.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Address>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserAddressController.patch"
      },
      "get": {
        "x-controller-name": "UserAddressController",
        "x-operation-name": "find",
        "tags": [
          "UserAddressController"
        ],
        "responses": {
          "200": {
            "description": "Array of User has many Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "UserAddressController.find"
      },
      "delete": {
        "x-controller-name": "UserAddressController",
        "x-operation-name": "delete",
        "tags": [
          "UserAddressController"
        ],
        "responses": {
          "200": {
            "description": "User.Address DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Address.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Address>"
                }
              }
            }
          }
        ],
        "operationId": "UserAddressController.delete"
      }
    },
    "/users/{id}/books": {
      "post": {
        "x-controller-name": "UserBookController",
        "x-operation-name": "create",
        "tags": [
          "UserBookController"
        ],
        "responses": {
          "200": {
            "description": "User model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBookInUser"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserBookController.create"
      },
      "patch": {
        "x-controller-name": "UserBookController",
        "x-operation-name": "patch",
        "tags": [
          "UserBookController"
        ],
        "responses": {
          "200": {
            "description": "User.Book PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Book.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Book>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserBookController.patch"
      },
      "get": {
        "x-controller-name": "UserBookController",
        "x-operation-name": "find",
        "tags": [
          "UserBookController"
        ],
        "responses": {
          "200": {
            "description": "Array of User has many Book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "UserBookController.find"
      },
      "delete": {
        "x-controller-name": "UserBookController",
        "x-operation-name": "delete",
        "tags": [
          "UserBookController"
        ],
        "responses": {
          "200": {
            "description": "User.Book DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Book.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Book>"
                }
              }
            }
          }
        ],
        "operationId": "UserBookController.delete"
      }
    },
    "/users/{id}/payments": {
      "post": {
        "x-controller-name": "UserPaymentController",
        "x-operation-name": "create",
        "tags": [
          "UserPaymentController"
        ],
        "responses": {
          "200": {
            "description": "User model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentInUser"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserPaymentController.create"
      },
      "patch": {
        "x-controller-name": "UserPaymentController",
        "x-operation-name": "patch",
        "tags": [
          "UserPaymentController"
        ],
        "responses": {
          "200": {
            "description": "User.Payment PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Payment.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Payment>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserPaymentController.patch"
      },
      "get": {
        "x-controller-name": "UserPaymentController",
        "x-operation-name": "find",
        "tags": [
          "UserPaymentController"
        ],
        "responses": {
          "200": {
            "description": "Array of User has many Payment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "UserPaymentController.find"
      },
      "delete": {
        "x-controller-name": "UserPaymentController",
        "x-operation-name": "delete",
        "tags": [
          "UserPaymentController"
        ],
        "responses": {
          "200": {
            "description": "User.Payment DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Payment.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Payment>"
                }
              }
            }
          }
        ],
        "operationId": "UserPaymentController.delete"
      }
    },
    "/users/{id}": {
      "put": {
        "x-controller-name": "UserController",
        "x-operation-name": "replaceById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserController.replaceById"
      },
      "patch": {
        "x-controller-name": "UserController",
        "x-operation-name": "updateById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "UserController.updateById"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "findById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UserController.findById"
      },
      "delete": {
        "x-controller-name": "UserController",
        "x-operation-name": "deleteById",
        "tags": [
          "UserController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "UserController.deleteById"
      }
    },
    "/users": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "create",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "operationId": "UserController.create"
      },
      "patch": {
        "x-controller-name": "UserController",
        "x-operation-name": "updateAll",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<User>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          }
        },
        "operationId": "UserController.updateAll"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "find",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Array of User model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "UserController.find"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "schemas": {
      "Banner": {
        "title": "Banner",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colors": {
            "type": "object"
          },
          "options": {
            "type": "object"
          }
        },
        "additionalProperties": true
      },
      "NewBanner": {
        "title": "NewBanner",
        "type": "object",
        "description": "(tsType: Omit<Banner, 'id'>, schemaOptions: { title: 'NewBanner', exclude: [ 'id' ] })",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colors": {
            "type": "object"
          },
          "options": {
            "type": "object"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Banner, 'id'>"
      },
      "BannerWithRelations": {
        "title": "BannerWithRelations",
        "type": "object",
        "description": "(tsType: BannerWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colors": {
            "type": "object"
          },
          "options": {
            "type": "object"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "BannerWithRelations"
      },
      "BannerPartial": {
        "title": "BannerPartial",
        "type": "object",
        "description": "(tsType: Partial<Banner>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "colors": {
            "type": "object"
          },
          "options": {
            "type": "object"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Partial<Banner>"
      },
      "BookWithRelations": {
        "title": "BookWithRelations",
        "type": "object",
        "description": "(tsType: BookWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "typeTransaction": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "colors": {
            "type": "object"
          },
          "details": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "isbn",
          "title"
        ],
        "additionalProperties": false,
        "x-typescript-type": "BookWithRelations"
      },
      "Book": {
        "title": "Book",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "typeTransaction": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "colors": {
            "type": "object"
          },
          "details": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "isbn",
          "title"
        ],
        "additionalProperties": false
      },
      "Category": {
        "title": "Category",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "cover"
        ],
        "additionalProperties": true
      },
      "NewCategory": {
        "title": "NewCategory",
        "type": "object",
        "description": "(tsType: Omit<Category, 'id'>, schemaOptions: { title: 'NewCategory', exclude: [ 'id' ] })",
        "properties": {
          "title": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "cover"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<Category, 'id'>"
      },
      "CategoryWithRelations": {
        "title": "CategoryWithRelations",
        "type": "object",
        "description": "(tsType: CategoryWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "cover"
        ],
        "additionalProperties": true,
        "x-typescript-type": "CategoryWithRelations"
      },
      "CategoryPartial": {
        "title": "CategoryPartial",
        "type": "object",
        "description": "(tsType: Partial<Category>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Partial<Category>"
      },
      "Leads": {
        "title": "Leads",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "contacted": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "additionalProperties": false
      },
      "NewLeads": {
        "title": "NewLeads",
        "type": "object",
        "description": "(tsType: Omit<Leads, 'id'>, schemaOptions: { title: 'NewLeads', exclude: [ 'id' ] })",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "contacted": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Leads, 'id'>"
      },
      "LeadsWithRelations": {
        "title": "LeadsWithRelations",
        "type": "object",
        "description": "(tsType: LeadsWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "contacted": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "LeadsWithRelations"
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cep": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "neighbourhood": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "cep",
          "street",
          "houseNumber"
        ],
        "additionalProperties": false
      },
      "NewAddressInUser": {
        "title": "NewAddressInUser",
        "type": "object",
        "description": "(tsType: Omit<Address, 'id' | 'userId'>, schemaOptions: { title: 'NewAddressInUser', exclude: [ 'id', 'userId' ] })",
        "properties": {
          "cep": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "neighbourhood": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "required": [
          "cep",
          "street",
          "houseNumber"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Address, 'id' | 'userId'>"
      },
      "AddressPartial": {
        "title": "AddressPartial",
        "type": "object",
        "description": "(tsType: Partial<Address>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "cep": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "neighbourhood": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Address>"
      },
      "NewBookInUser": {
        "title": "NewBookInUser",
        "type": "object",
        "description": "(tsType: @loopback/repository-json-schema#Optional<Omit<Book, 'id'>, 'userId'>, schemaOptions: { title: 'NewBookInUser', exclude: [ 'id' ], optional: [ 'userId' ] })",
        "properties": {
          "isbn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "typeTransaction": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "colors": {
            "type": "object"
          },
          "details": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "isbn",
          "title"
        ],
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository-json-schema#Optional<Omit<Book, 'id'>, 'userId'>"
      },
      "BookPartial": {
        "title": "BookPartial",
        "type": "object",
        "description": "(tsType: Partial<Book>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "typeTransaction": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "colors": {
            "type": "object"
          },
          "details": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Book>"
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "cvv": {
            "type": "number"
          },
          "validate": {
            "type": "string"
          },
          "cardNumber": {
            "type": "number"
          },
          "cradName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "cvv",
          "validate",
          "cardNumber",
          "cradName"
        ],
        "additionalProperties": false
      },
      "NewPaymentInUser": {
        "title": "NewPaymentInUser",
        "type": "object",
        "description": "(tsType: @loopback/repository-json-schema#Optional<Omit<Payment, 'id'>, 'userId'>, schemaOptions: { title: 'NewPaymentInUser', exclude: [ 'id' ], optional: [ 'userId' ] })",
        "properties": {
          "surname": {
            "type": "string"
          },
          "cvv": {
            "type": "number"
          },
          "validate": {
            "type": "string"
          },
          "cardNumber": {
            "type": "number"
          },
          "cradName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "cvv",
          "validate",
          "cardNumber",
          "cradName"
        ],
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository-json-schema#Optional<Omit<Payment, 'id'>, 'userId'>"
      },
      "PaymentPartial": {
        "title": "PaymentPartial",
        "type": "object",
        "description": "(tsType: Partial<Payment>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "cvv": {
            "type": "number"
          },
          "validate": {
            "type": "string"
          },
          "cardNumber": {
            "type": "number"
          },
          "cradName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Payment>"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDay": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "displayName",
          "email"
        ],
        "additionalProperties": false
      },
      "NewUser": {
        "title": "NewUser",
        "type": "object",
        "description": "(tsType: User, schemaOptions: { title: 'NewUser' })",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDay": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "displayName",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "User"
      },
      "AddressWithRelations": {
        "title": "AddressWithRelations",
        "type": "object",
        "description": "(tsType: AddressWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "cep": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "neighbourhood": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "cep",
          "street",
          "houseNumber"
        ],
        "additionalProperties": false,
        "x-typescript-type": "AddressWithRelations"
      },
      "PaymentWithRelations": {
        "title": "PaymentWithRelations",
        "type": "object",
        "description": "(tsType: PaymentWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "cvv": {
            "type": "number"
          },
          "validate": {
            "type": "string"
          },
          "cardNumber": {
            "type": "number"
          },
          "cradName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "cvv",
          "validate",
          "cardNumber",
          "cradName"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PaymentWithRelations"
      },
      "UserWithRelations": {
        "title": "UserWithRelations",
        "type": "object",
        "description": "(tsType: UserWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDay": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "books": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookWithRelations"
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressWithRelations"
            }
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentWithRelations"
            }
          }
        },
        "required": [
          "id",
          "displayName",
          "email"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UserWithRelations"
      },
      "UserPartial": {
        "title": "UserPartial",
        "type": "object",
        "description": "(tsType: Partial<User>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDay": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<User>"
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "Banner.Filter": {
        "type": "object",
        "title": "Banner.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "colors": {
                    "type": "boolean"
                  },
                  "options": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Banner.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Banner>"
      },
      "Banner.Filter1": {
        "type": "object",
        "title": "Banner.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Banner.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "boolean"
                  },
                  "colors": {
                    "type": "boolean"
                  },
                  "options": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Banner.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Banner>"
      },
      "Book.Filter": {
        "type": "object",
        "title": "Book.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "isbn": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "author": {
                    "type": "boolean"
                  },
                  "cover": {
                    "type": "boolean"
                  },
                  "category": {
                    "type": "boolean"
                  },
                  "typeTransaction": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "colors": {
                    "type": "boolean"
                  },
                  "details": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "boolean"
                  },
                  "updatedAt": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "isbn",
                    "title",
                    "author",
                    "cover",
                    "category",
                    "typeTransaction",
                    "price",
                    "colors",
                    "details",
                    "createdAt",
                    "updatedAt",
                    "userId"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Book.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Book>"
      },
      "Book.Filter1": {
        "type": "object",
        "title": "Book.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Book.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "isbn": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "author": {
                    "type": "boolean"
                  },
                  "cover": {
                    "type": "boolean"
                  },
                  "category": {
                    "type": "boolean"
                  },
                  "typeTransaction": {
                    "type": "boolean"
                  },
                  "price": {
                    "type": "boolean"
                  },
                  "colors": {
                    "type": "boolean"
                  },
                  "details": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "boolean"
                  },
                  "updatedAt": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "isbn",
                    "title",
                    "author",
                    "cover",
                    "category",
                    "typeTransaction",
                    "price",
                    "colors",
                    "details",
                    "createdAt",
                    "updatedAt",
                    "userId"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Book.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Book>"
      },
      "Category.Filter": {
        "type": "object",
        "title": "Category.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "cover": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Category.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Category>"
      },
      "Category.Filter1": {
        "type": "object",
        "title": "Category.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Category.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "boolean"
                  },
                  "cover": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Category.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Category>"
      },
      "Leads.Filter": {
        "type": "object",
        "title": "Leads.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Leads.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "contacted": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "email",
                    "contacted"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Leads.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Leads>"
      },
      "PingResponse": {
        "type": "object",
        "title": "PingResponse",
        "properties": {
          "greeting": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "properties": {
              "Content-Type": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "User.ScopeFilter": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "User.ScopeFilter"
      },
      "User.IncludeFilter.Items": {
        "title": "User.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/User.ScopeFilter"
          }
        }
      },
      "User.Filter": {
        "type": "object",
        "title": "User.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "displayName": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "birthDay": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "boolean"
                  },
                  "updatedAt": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "displayName",
                    "email",
                    "birthDay",
                    "createdAt",
                    "updatedAt"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "User.Fields"
          },
          "include": {
            "title": "User.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/User.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<User>"
      },
      "User.Filter1": {
        "type": "object",
        "title": "User.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "User.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "displayName": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "birthDay": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "boolean"
                  },
                  "updatedAt": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "displayName",
                    "email",
                    "birthDay",
                    "createdAt",
                    "updatedAt"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "User.Fields"
          },
          "include": {
            "title": "User.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/User.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<User>"
      }
    },
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}